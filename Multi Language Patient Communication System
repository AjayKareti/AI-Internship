import random

# Sample patient database with language and preferred communication channel
patients = [
    {"id": 1, "name": "Ravi Kumar", "language": "Tamil", "channel": "SMS", "age": 60},
    {"id": 2, "name": "Ananya Rao", "language": "Telugu", "channel": "WhatsApp", "age": 30},
    {"id": 3, "name": "Joseph Mathew", "language": "Malayalam", "channel": "IVR", "age": 65},
    {"id": 4, "name": "Rahul Sharma", "language": "Hindi", "channel": "SMS", "age": 45},
    {"id": 5, "name": "David Thomas", "language": "English", "channel": "WhatsApp", "age": 25},
]

# Predefined multi-language messages
messages = {
    "Tamil": "உங்கள் நேரம் உறுதிசெய்யப்பட்டது. தயவுசெய்து வருக!",
    "Telugu": "మీ నియామకం నిర్ధారించబడింది. దయచేసి రండి!",
    "Malayalam": "നിങ്ങളുടെ അപോയിന്റ്മെന്റ് സ്ഥിരീകരിച്ചിരിക്കുന്നു. ദയവായി വരൂ!",
    "Hindi": "आपका अपॉइंटमेंट कन्फर्म हो गया है। कृपया आएं!",
    "English": "Your appointment is confirmed. Please visit!",
}

def get_message(patient, messages, group="A"):
    """Fetch the message for the given patient based on their language and A/B testing group."""
    if group == "A":
        language = patient.get("language", "English")  # Native language for Group A
    else:
        language = "English"  # Default to English for Group B
    return messages.get(language, messages["English"])

def select_channel(patient):
    """Dynamic channel selection based on demographics."""
    if patient["age"] > 50:  # Elderly patients
        return "IVR"
    return patient.get("channel", "SMS")  # Default channel for others

def send_message(patient, messages, group="A"):
    """Simulate sending a message based on patient language, channel, and A/B testing group."""
    message = get_message(patient, messages, group)
    channel = select_channel(patient)
    print(f"📩 Sending via {channel} to {patient['name']} ({patient['language']}): {message}")

def simulate_sending(patients, messages):
    """Simulate sending messages to all patients with A/B testing."""
    print("📬 Sending messages to patients...\n")
    for patient in patients:
        # Randomly assign patients to Group A or Group B for A/B testing
        group = random.choice(["A", "B"])
        send_message(patient, messages, group)

def measure_effectiveness(patients):
    """Simulate confirmation tracking."""
    confirmed = sum(random.choices([0, 1], k=len(patients)))  # Random confirmations
    confirmation_rate = (confirmed / len(patients)) * 100
    print(f"\n✅ Confirmation Rate: {confirmation_rate:.2f}%")

# Main simulation flow
simulate_sending(patients, messages)
measure_effectiveness(patients)
